{
  "version": 3,
  "sources": ["../../url-join/lib/url-join.js", "dep:url-join"],
  "sourcesContent": ["function normalize (strArray) {\n  var resultArray = [];\n  if (strArray.length === 0) { return ''; }\n\n  if (typeof strArray[0] !== 'string') {\n    throw new TypeError('Url must be a string. Received ' + strArray[0]);\n  }\n\n  // If the first part is a plain protocol, we combine it with the next part.\n  if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n    var first = strArray.shift();\n    strArray[0] = first + strArray[0];\n  }\n\n  // There must be two or three slashes in the file protocol, two slashes in anything else.\n  if (strArray[0].match(/^file:\\/\\/\\//)) {\n    strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n  } else {\n    strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n  }\n\n  for (var i = 0; i < strArray.length; i++) {\n    var component = strArray[i];\n\n    if (typeof component !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + component);\n    }\n\n    if (component === '') { continue; }\n\n    if (i > 0) {\n      // Removing the starting slashes for each component but the first.\n      component = component.replace(/^[\\/]+/, '');\n    }\n    if (i < strArray.length - 1) {\n      // Removing the ending slashes for each component but the last.\n      component = component.replace(/[\\/]+$/, '');\n    } else {\n      // For the last component we will combine multiple slashes to a single one.\n      component = component.replace(/[\\/]+$/, '/');\n    }\n\n    resultArray.push(component);\n\n  }\n\n  var str = resultArray.join('/');\n  // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n  // remove trailing slash before parameters or hash\n  str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n  // replace ? in parameters with &\n  var parts = str.split('?');\n  str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n  return str;\n}\n\nexport default function urlJoin() {\n  var input;\n\n  if (typeof arguments[0] === 'object') {\n    input = arguments[0];\n  } else {\n    input = [].slice.call(arguments);\n  }\n\n  return normalize(input);\n}\n", "import d from \"./node_modules/url-join/lib/url-join.js\";export default d;"],
  "mappings": ";AAAA,mBAAoB,UAAU;AAC5B,MAAI,cAAc,CAAC;AACnB,MAAI,SAAS,WAAW,GAAG;AAAE,WAAO;AAAA,EAAI;AAExC,MAAI,OAAO,SAAS,OAAO,UAAU;AACnC,UAAM,IAAI,UAAU,oCAAoC,SAAS,EAAE;AAAA,EACrE;AAGA,MAAI,SAAS,GAAG,MAAM,cAAc,KAAK,SAAS,SAAS,GAAG;AAC5D,QAAI,QAAQ,SAAS,MAAM;AAC3B,aAAS,KAAK,QAAQ,SAAS;AAAA,EACjC;AAGA,MAAI,SAAS,GAAG,MAAM,cAAc,GAAG;AACrC,aAAS,KAAK,SAAS,GAAG,QAAQ,iBAAiB,QAAQ;AAAA,EAC7D,OAAO;AACL,aAAS,KAAK,SAAS,GAAG,QAAQ,iBAAiB,OAAO;AAAA,EAC5D;AAEA,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,YAAY,SAAS;AAEzB,QAAI,OAAO,cAAc,UAAU;AACjC,YAAM,IAAI,UAAU,oCAAoC,SAAS;AAAA,IACnE;AAEA,QAAI,cAAc,IAAI;AAAE;AAAA,IAAU;AAElC,QAAI,IAAI,GAAG;AAET,kBAAY,UAAU,QAAQ,UAAU,EAAE;AAAA,IAC5C;AACA,QAAI,IAAI,SAAS,SAAS,GAAG;AAE3B,kBAAY,UAAU,QAAQ,UAAU,EAAE;AAAA,IAC5C,OAAO;AAEL,kBAAY,UAAU,QAAQ,UAAU,GAAG;AAAA,IAC7C;AAEA,gBAAY,KAAK,SAAS;AAAA,EAE5B;AAEA,MAAI,MAAM,YAAY,KAAK,GAAG;AAI9B,QAAM,IAAI,QAAQ,mBAAmB,IAAI;AAGzC,MAAI,QAAQ,IAAI,MAAM,GAAG;AACzB,QAAM,MAAM,MAAM,IAAK,OAAM,SAAS,IAAI,MAAK,MAAM,MAAM,KAAK,GAAG;AAEnE,SAAO;AACT;AAEe,mBAAmB;AAChC,MAAI;AAEJ,MAAI,OAAO,UAAU,OAAO,UAAU;AACpC,YAAQ,UAAU;AAAA,EACpB,OAAO;AACL,YAAQ,CAAC,EAAE,MAAM,KAAK,SAAS;AAAA,EACjC;AAEA,SAAO,UAAU,KAAK;AACxB;;;ACrEwD,IAAO,mBAAQ;",
  "names": []
}
